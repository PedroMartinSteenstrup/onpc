/*
 * Enhanced Music Controller
 * Copyright (C) 2019-2022 by Mikhail Kulesh
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details. You should have received a copy of the GNU General
 * Public License along with this program.
 */
// @dart=2.9

import "package:flutter/material.dart";
import "package:flutter/src/painting/edge_insets.dart";
import "package:flutter/src/widgets/framework.dart";
import "package:flutter_markdown/flutter_markdown.dart";
import "package:flutter_markdown/src/style_sheet.dart";
import "package:url_launcher/url_launcher.dart";

import "../config/Configuration.dart";
import "Logging.dart";
import "Pair.dart";

class MyCustomScrollBehavior extends MaterialScrollBehavior
{
    // empty
}

class SerialPortWrapper
{
    static List<Pair<String, String>> getPorts()
    {
        return [];
    }

    void openPort(String name)
    {
        // empty
    }

    void dispose()
    {
        // empty
    }

    void sendMessage(final String data)
    {
        // empty
    }
}

class MarkdownWrapper
{
    static Widget buildMarkdown(String data, MarkdownStyleSheet styleSheet, EdgeInsetsGeometry padding)
    {
        return Markdown(
            data: data,
            styleSheet: styleSheet,
            padding: padding,
            onTapLink: (String href)
            {
                Logging.info(styleSheet, "URL pressed: " + href);
                _launchURL(href);
            });
    }

    static void _launchURL(final String url) async
    {
        if (await canLaunch(url))
        {
            await launch(url);
        }
    }
}

class WindowManagerWrapper
{
    final Configuration _configuration;

    WindowManagerWrapper(this._configuration);

    void restoreWindow() async
    {
        // empty
    }

    void initState()
    {
        // empty
    }

    void dispose()
    {
        // empty
    }
}